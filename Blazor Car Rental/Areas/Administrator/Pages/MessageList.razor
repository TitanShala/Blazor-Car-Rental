@page "/MessageList"

@using Blazor_Car_Rental.Areas.Identity.Models;
@using Blazor_Car_Rental.Data.Models
@using Blazor_Car_Rental.Areas.Administrator.Services
@using Blazor_Car_Rental.Data.Services
@inject MessageService MessageServices;
@inject NavigationManager nav;
@inject IFileUpload fileUpload;
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IJSRuntime JSRuntime;


<h1 class="text-center text-white bg-dark">Messages</h1>


@if (Messages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-dark cars-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Subject</th>
                <th>Text</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in Messages)
            {
                <tr>
                    <td>@message.Name</td>
                    <td>@message.Email</td>
                    <td>@message.Subject</td>
                    <td>@message.Text</td>
                    <td>
                        <div style="display:flex; flex-direction:row; justify-content:center; align-items:center;">
                            <input type="button" class="btn btn-danger" value="Delete" @onclick="() => Delete(message.Id)" />
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private List<Message> Messages;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            JSRuntime.InvokeVoidAsync("goToLogin");
            return;
        }
        else if (!authState.User.IsInRole("Admin"))
        {
            nav.NavigateTo("/");
            return;
        }
        Messages = MessageServices.GetMessages();
        Messages.Reverse();
    }

    public async Task Delete(string id)
    {
        var confirmation = await JSRuntime.InvokeAsync<bool>("confirm");
        if (confirmation)
        {
            MessageServices.DeleteMessage(id);
            Messages = MessageServices.GetMessages();
            JSRuntime.InvokeVoidAsync("ActionDone");
        }

    }

}