@page "/MyRentals"

@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Blazor_Car_Rental.Data.Models
@using Blazor_Car_Rental.Data.Services
@inject RentalServices RentalService
@inject NavigationManager nav;
@inject IFileUpload fileUpload;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime


<h1 class="text-center text-white bg-dark">My Rentals List</h1>


@if (RentalList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-dark cars-table">
        <thead>
            <tr>
                <th>Car</th>
                <th>ReceiptDate</th>
                <th>Return Date</th>
                <th>Rated</th>
                <th>Car Image</th>
                <th>Review <i class="fa fa-star" aria-hidden="true"></i></th>
                <th>Price</th>
                <th>Pay Online. 10% Discount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rental in RentalList)
            {
                <tr>
                    <td>@rental.Car.Make @rental.Car.Model</td>
                    <td>@rental.ReceiptDate.Day/@rental.ReceiptDate.Month/@rental.ReceiptDate.Year</td>
                    <td>@rental.ReturnDate.Day/@rental.ReturnDate.Month/@rental.ReturnDate.Year</td>
                    <td>@string.Format("{0:0.0}", rental.Rate) <i class="fa fa-star" aria-hidden="true"></i></td>
                    <td><img src="../CarImages/@rental.Car.ImageName" class="img-fluid table-image" /></td>
                    <td>
                        <div style="display:flex; flex-direction:column; justify-content:center; align-items:center;">
                            @if (rental.Returned == false)
                            {
                                <p>Not returned yet</p>
                            }
                            else if (rental.Rate == 0 || rental.Rate == null)
                            {
                                <select @bind="rate" name="selected" class="form-control">
                                    <option disabled>Review</option>
                                    <option>1</option>
                                    <option>2</option>
                                    <option>3</option>
                                    <option>4</option>
                                    <option>5</option>
                                </select>
                                <input type="button" class="btn btn-success mt-3" value="Rate" @onclick="() => Rate(rate, rental)" />
                            }
                            else
                            {
                                <p>Rated</p>
                            }
                        </div>
                    </td>
                    <td>
                        @getPrice(rental) Euro
                    </td>
                    @if (rental.Paid == false)
                    {
                        <td><a class="btn btn-success" href="/Checkout/@rental.Id">Checkout</a></td>
                    }
                    else
                    {
                        <td>Paid</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code{
    int? rate = 0;
    private List<Rental> RentalList;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            JSRuntime.InvokeVoidAsync("goToLogin");
            return;
        }
        RentalList = await RentalService.GetMyRentals(authState.User.Identity.Name);
        RentalList.Reverse();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var name = await sessionStorage.GetItemAsync<string>("name");
    }

    void Rate(int? rate, Rental rental)
    {
        if (rate != 0 && rate != null)
        {
            rental.Rate = rate;
            RentalService.Update(rental);
            JSRuntime.InvokeVoidAsync("ActionDone");
            this.rate = 0;
            nav.NavigateTo("/MyRentals");
        }
    }

    double getPrice(Rental rental)
    {
        double CarPrice = rental.Car.Price;
        int days = (int) (rental.ReturnDate - rental.ReceiptDate).TotalDays;
        if (days < 1)
        {
            return CarPrice;
        }


        return CarPrice * days;
    }
    /*
    void AddNewCar()
    {
        nav.NavigateTo("/CreateCar");
    }

    async Task EditCar(int id)
    {
        nav.NavigateTo();
    }

    async Task CarDetails(int id)
    {
        nav.NavigateTo();
    }

    async Task DeleteCar()
    {
        await fileUpload.DeleteOldImage(imageName);
        CarService.DeleteCar(id);
        cars = await CarService.GetCars();
    }*/
}