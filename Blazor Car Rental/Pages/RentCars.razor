@page "/RentCars"
@using Blazor_Car_Rental.Data.Models
@using Blazor_Car_Rental.Areas.Administrator.Services
@using Blazor_Car_Rental.Data.Services
@inject AdmCarServices CarService
@inject RentalServices RentalService
@inject NavigationManager nav;

<h3 class="text-white text-center mt-5">Cars</h3>
@if (cars == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <section class="top-cars-section pt-5 text-center rentcars">
        <div class="container top-cars">
            <div class="form-row">
                <!--Sorting Container-->
                <div class="col-2 mt-5">
                    <p>Sort by:</p>
                    <div>                        
                        <button @onclick="() => SortPrice()" class="bg-success"><i class="fa fa-sort" aria-hidden="true"></i>Price</button>
                        <button @onclick="() => SortYear()" class="bg-success"><i class="fa fa-sort" aria-hidden="true"></i>Year</button>
                    </div>
                </div>
                <!--Filtering Container-->
                <div class="col-md-10">
                    <div class="form-row">
                        <form class="col-12" @onsubmit="SearchCars">
                            <div class="row mb-5">
                                <div class="col-12">
                                    <div class="row d-flex justify-content-center">
                                        <input class="col-9 search mr-2" type="text" placeholder="Search by make and model" @bind="Search" />
                                        <input class="btn btn-danger" type="button" @onclick="SearchCars" value="Search" />
                                    </div>
                                </div>
                                <div class="col-12 mt-3">
                                    <input class="btn btn-danger" type="button" @onclick="RemoveFilters" value="RemoveFilters" />
                                </div>
                            </div>
                            <!--Date Filter-->
                            <input value="Filter" type="button" class="btn btn-info mb-5" @onclick="() => enableFiltering()" />
                            <div style="display:@filtering">
                                <div class="row">
                                    <p class="col-12 text-center">Choose receipt date and return date!</p>
                                    <div class="form-group col-6">
                                        <label class="control-label">Receipt Date</label>
                                        <input disabled="@isDisabled" type="date" class="form-control" @bind="receiptDate" />
                                    </div>
                                    <div class="form-group col-6">
                                        <label class="control-label">Return Date</label>
                                        <input disabled="@isDisabled" type="date" class="form-control" @bind="returnDate" />
                                    </div>
                                    <input class="text-right" type="checkbox"  checked=@(isDisabled.Equals("true"))  @bind-value="isDisabled" />Disable/Enable Filtering by Date
                                    <p class="error text-danger">@error</p>
                                </div>
                                <div class="row mt-4 mb-4">
                                    <!--Transmission Filter-->
                                    <div class="transmission col-6">
                                        <p>Transmission:</p>
                                        <lable>
                                            <input type="radio" name="transmission" checked=@(TransmissionFilter.Equals("Automatic")) @onclick='() =>TransmissionFilter="Automatic"' />Automatic
                                        </lable>
                                        <lable>
                                            <input type="radio" name="transmission" checked=@(TransmissionFilter.Equals("Manual")) @onclick='() =>TransmissionFilter="Manual"' />Manual
                                        </lable>
                                    </div>
                                    <div class="fuel col-6">
                                        <!--Fuel Filter-->
                                        <p>Fuel</p>
                                        <lable>
                                            <input type="radio" name="group" checked=@(FuelFilter.Equals("Diesel")) @onclick='() =>FuelFilter="Diesel"' />Diesel
                                        </lable>
                                        <lable>
                                            <input type="radio" name="group" checked=@(FuelFilter.Equals("Gasoline")) @onclick='() =>FuelFilter="Gasoline"' />Gasoline
                                        </lable>
                                        <lable>
                                            <input type="radio" name="group" checked=@(FuelFilter.Equals("Hybrid")) @onclick='() =>FuelFilter="Hybrid"' />Hybrid
                                        </lable>
                                        <lable>
                                            <input type="radio" name="group" checked=@(FuelFilter.Equals("Electricity")) @onclick='() =>FuelFilter="Electricity"' />Electricity
                                        </lable>
                                    </div>
                                </div>
                            </div>


                        </form>
                    </div>
                </div>
            </div>

            <div class="row">
                @foreach (var car in cars)
                {
                    <div class="col-lg-4 col-md-4 mb-3">
                        <div class="trainer-item">
                            <div class="image-thumb">
                                <a><img src="../CarImages/@car.ImageName" class="img-fluid" /></a>
                            </div>
                            <div class="down-content">
                                <span>from <sup>$</sup>@car.Price per day</span>
                                <p style="font-weight:bold">Make: @car.Make | Model: @car.Model</p>
                                <p style="font-weight:bold">Fuel: @car.Fuel | Engine: @car.EngineDisplacement L</p>
                                <p>
                                    <i class="fa fa-table" title="year"></i>@car.Year &nbsp;&nbsp;&nbsp;
                                    <i class="fa fa-briefcase" title="luggages"></i> @car.Luggages &nbsp;&nbsp;&nbsp;
                                    <i class="fa fa-sign-out" title="doors"></i> @car.Doors &nbsp;&nbsp;&nbsp;
                                    <i class="fa fa-cog" title="transmission"></i> @car.Transmission
                                    <i class="" title="power"></i>@car.Power HP
                                </p>
                                <p>Rented: @car.rentalcount times!</p>
                                <p>Rated: @string.Format("{0:0.0}", getReview(car.Id))  stars</p>
                                <input type="button" class="btn btn-success btn-1" value="Rent" @onclick="() => RentCar(car.Id)" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
}
@code {
    private string FuelFilter = "none";
    private string TransmissionFilter = "none";
    private string SortbyPrice;
    private string SortbyYear;
    private string Search ;
    DateTime receiptDate;
    DateTime returnDate;
    DateTime? today = DateTime.Today;
    string error = "";
    bool isDisabled = true;
    string filtering = "none";

    private List<Car> AllCars;
    private List<Car> cars;
    protected override async Task OnInitializedAsync()
    {
        isDisabled = true;
        cars = CarService.GetCars();
        cars.Reverse();
        AllCars = cars;
        returnDate = (DateTime)today;
        receiptDate = (DateTime)today;
    }
    async Task RentCar(int id)
    {
        nav.NavigateTo("/RentalCreate/" + id);
    }
    async Task SortPrice()
    {
        if(SortbyPrice == null || SortbyPrice.Equals("Ascending"))
        {
            SortbyPrice = "Descending";
            cars = cars.OrderByDescending(c => c.Price).ToList();
        }
        else
        {
            cars = cars.OrderBy(c => c.Price).ToList();
            SortbyPrice = "Ascending";
        }

    }

    async Task SortYear()
    {
        if (SortbyYear == null || SortbyYear.Equals("Ascending"))
        {
            SortbyYear = "Descending";
            cars = cars.OrderByDescending(c => c.Year).ToList();
        }
        else
        {
            cars = cars.OrderBy(c => c.Year).ToList();
            SortbyYear = "Ascending";
        }

    }

    async Task SearchCars()
    {
        var counter = 0;

        if (isDisabled == false)
        {
            //check if time is valid

            if (receiptDate < today || receiptDate > returnDate)
            {
                error = "Choose a valid date!";
                return;
            }
            cars = RentalService.getFilteredCars(receiptDate, returnDate , AllCars);
            //AllCars = cars;
            counter++;
            error = "method finish";
        }

        if (!FuelFilter.Equals("none"))
        {
            counter++;
            switch (FuelFilter)
            {
                case "Diesel":
                    cars = AllCars.Where(c => c.Fuel.Equals("Diesel")).ToList();
                    break;
                case "Gasoline":
                    cars = AllCars.Where(c => c.Fuel.Equals("Gasoline")).ToList();
                    break;
                case "Electricity":
                    cars = AllCars.Where(c => c.Fuel.Equals("Electricity")).ToList();
                    break;
                case "Hybrid":
                    cars = AllCars.Where(c => c.Fuel.Equals("Hybrid")).ToList();
                    break;
                default:
                    cars = AllCars;
                    break;
            }
        }

        if (!String.IsNullOrEmpty(Search))
        {
            var s = Search.ToLower();
            s = RemoveSpaces(s);

            if (counter > 0)
                cars = cars.Where(c=> c.Make.ToLower().Concat(c.Model.ToLower()).ToString().Contains(s)).ToList();
            else
                cars = AllCars.Where(c => (c.Make.ToLower()+c.Model.ToLower()).Contains(s)).ToList();

            counter++;
        }


        if (!TransmissionFilter.Equals("none"))
        {
            if (counter > 0)
                cars =cars.Where(c => c.Transmission.Equals(TransmissionFilter)).ToList();
            else
                cars = AllCars.Where(c => c.Transmission.Equals(TransmissionFilter)).ToList();

        }
        error = "";

    }
    async Task RemoveFilters()
    {
        cars = CarService.GetCars();
        cars.Reverse();
        AllCars = cars;
        TransmissionFilter = "none";
        FuelFilter = "none";
        Search = null;
        error = "";
        isDisabled = true;
    }

    double getReview(int carId) {
        return RentalService.getReview(carId);
    }

    void enableFiltering()
    {
        if(filtering.Equals("none"))
            filtering = "block";
        else
            filtering = "none";
    }

    string RemoveSpaces(string search)
    {
        string output = "";
        foreach(char c in search)
        {
            if( c != ' ')
            {
                output += c;
            }
        }
        return output;
    }
}
