@page "/RentalCreate/{Id}"

@using Blazor_Car_Rental.Data.Models
@using Blazor_Car_Rental.Data.Services
@using Blazor_Car_Rental.Areas.Administrator.Services
@using Blazor_Car_Rental.Areas.Identity.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RentalServices RentalService
@inject AdmCarServices CarServices
@inject NavigationManager nav
@inject IJSRuntime JSRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>RentalCreate</h3>

<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Make" class="control-label">Receipt Date</label>
                <input type="date" form="Make" class="form-control" @bind="rental.ReceiptDate" />
            </div>
            <div class="form-group">
                <label for="Model" class="control-label">Return Date</label>
                <input type="date" form="Model" class="form-control" @bind="rental.ReturnDate" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">

                <input type="button" class="btn btn-primary" @onclick="@CreateNewRental" value="Save" />
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Cancel" />
                <button id="checkout-button" @onclick="check">Checkout</button>
            </div>
        </div>
    </div>
    <p class="text-danger">@error</p>
</form>


@code {

    [Parameter]
    public string Id { get; set; }
    DateTime? today = DateTime.Today;
    public int CarId;
    Rental rental = new Rental();
    UserIdentity user = new UserIdentity();
    string username = "";
    string error = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            nav.NavigateTo("Identity/Account/Login");
        }
        CarId = (Convert.ToInt32(Id));

        username = authState.User.Identity.Name;
        //var user1 = authState.User;
        //var userid =  $"User Id: {user1.FindFirst(c => c.Type == "sub")?.Value}";

        rental.ReceiptDate = (DateTime) today;
        rental.ReturnDate = (DateTime) today;


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await sessionStorage.SetItemAsync("name", "Veture");

    }

    private void CreateNewRental()
    {
        rental.Paid = false;

        if (RentalService.ValidOrderDate(rental.ReceiptDate, rental.ReturnDate, today, CarId))
        {
            RentalService.CreateRental(rental, CarId, username);
            nav.NavigateTo("/cars");
        }
        else
        {
            error = "You choosed an invalid date or the car is rented in the date you required";
        }

    }
    private void Cancel()
    {
        nav.NavigateTo("/cars");
    }

    public async void check()
    {
        await JSRuntime.InvokeVoidAsync("check");
    }


}
